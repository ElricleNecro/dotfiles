[[plugins]]
repo = 'haya14busa/dein-command.vim'
on_cmd = 'Dein'

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
    nnoremap <silent><buffer><expr> N defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> n defx#do_action('new_file')
    nnoremap <silent><buffer><expr> d defx#do_action('remove')
    nnoremap <silent><buffer><expr> r defx#do_action('rename')

    nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
    nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
endfunction

" Close DEFX buffer after opening a file
autocmd BufReadPre,FileReadPre * call s:DelDefxBuffer()
function! s:DelDefxBuffer()
  if bufexists("[defx]")
    exe 'bdelete \[defx\]'
  endif
endfunction
'''

[[plugins]]
repo = 'andymass/vim-matchup'

[[plugins]]
repo = 'tpope/vim-surround'
hook_add = '''
" change: cs<old><new>
" delete: ds<delimiter>
" add: 
"   ys<text object><delimiter> Does not add new lines
"   yS<text object><delimiter> Add new lines
"   yss)  (s for the whole line)
"   ys$"  (till the end of the line)
"   (use closing delimiter: > } ] ...)
" visual mode: 
"      select word
"      S 
"      <delimter>
" tags:
"   cs'<q>  (add <q>,</q>)
"   cst"    (change surrouding tag to ")
'''

[[plugins]]
repo = 'brooth/far.vim'
on_cmd = ['Far', 'Fardo', 'Farp', 'Refar', 'Farundo', 'F']
hook_add = '''
let g:far#default_mappings = 0

augroup FARBufferEnter
    " Exclude item under the cursor.
    autocmd FileType far_vim nnoremap <buffer><silent> x :call g:far#change_exclude_under_cursor(1)<cr>
    autocmd FileType far_vim vnoremap <buffer><silent> x :call g:far#change_exclude_under_cursor(1)<cr>

    " Include item under the cursor.
    autocmd FileType far_vim nnoremap <buffer><silent> i :call g:far#change_exclude_under_cursor(0)<cr>
    autocmd FileType far_vim vnoremap <buffer><silent> i :call g:far#change_exclude_under_cursor(0)<cr>

    " Toggle item exclusion under the cursor
    autocmd FileType far_vim nnoremap <buffer><silent> t :call g:far#change_exclude_under_cursor(-1)<cr>
    autocmd FileType far_vim vnoremap <buffer><silent> t :call g:far#change_exclude_under_cursor(-1)<cr>

    " Exclude all items
    autocmd FileType far_vim noremap <buffer><silent> X :call g:far#change_exclude_all(1)<cr>

    " Include all items
    autocmd FileType far_vim noremap <buffer><silent> I :call g:far#change_exclude_all(0)<cr>

    " Toggle exclusion for all items.
    autocmd FileType far_vim noremap <buffer><silent> T :call g:far#change_exclude_all(-1)<cr>

    " Jump to the source code of the item under the cursor.
    autocmd FileType far_vim noremap <buffer><silent> <CR> :call g:far#jump_buffer_under_cursor()<cr>

    " Open preview window (if not) and scroll to the item under the cursor.
    autocmd FileType far_vim noremap <buffer><silent> p :call g:far#show_preview_window_under_cursor()<cr>

    " Close preview window.
    autocmd FileType far_vim noremap <buffer><silent> P :call g:far#close_preview_window()<cr>

    " Scroll preview window up (if open).
    autocmd FileType far_vim noremap <buffer><silent> u :call g:far#scroll_preview_window(-g:far#preview_window_scroll_step)<cr>

    " Scroll preview window down (if open).
    autocmd FileType far_vim noremap <buffer><silent> d :call g:far#scroll_preview_window(g:far#preview_window_scroll_step)<cr>

    " Expand node under the cursor.
    autocmd FileType far_vim noremap <buffer><silent> zo :call g:far#change_collapse_under_cursor(0)<cr>

    " Collapse node under the cursor.
    autocmd FileType far_vim noremap <buffer><silent> zc :call g:far#change_collapse_under_cursor(1)<cr>

    " Toggle node expanding under the cursor.
    autocmd FileType far_vim noremap <buffer><silent> za :call g:far#change_collapse_under_cursor(-1)<cr>

    " Expand all nodes.
    autocmd FileType far_vim noremap <buffer><silent> zO :call g:far#change_collapse_all(0)<cr>

    " Collapse all nodes.
    autocmd FileType far_vim noremap <buffer><silent> zC :call g:far#change_collapse_all(1)<cr>

    " Toggle exclusion for all nodes.
    autocmd FileType far_vim noremap <buffer><silent> zT :call g:far#change_collapse_all(-1)<cr>
augroup END
'''

[[plugins]]
repo = 'tpope/vim-eunuch'
on_cmd = ['Delete', 'Unlink', 'Move', 'Rename', 'Chmod', 'Mkdir', 'Find', 'Locate', 'Wall', 'SudoWrite', 'SudoEdit']

[[plugins]]
repo = 'regedarek/ZoomWin'
on_cmd = ['ZoomWin']
hook_add = '''
nmap <leader>z <Plug>ZoomWin
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_color_gui = '#17252c'
let g:indentLine_fileTypeExclude = ['fortifytestpane', 'fortifyauditpane']
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

# [[plugins]]
# repo = 'tweekmonster/fzf-filemru'
# hook_add = '''
# nnoremap <leader>m :FilesMru --tiebreak=end<Return>
# '''

[[plugins]]
repo = 'pbogut/fzf-mru.vim'
hook_add = '''
nnoremap <leader>m :FZFMru<Return> 
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
nnoremap <leader>h :History<Return>
nnoremap <leader>b :Buffers<Return>
nnoremap <leader>s :Snippets<Return>
nnoremap <leader>d :Files<Return>

let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

let g:fzf_layout = { 'down': '~40%' }

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
'''

[[plugins]]
repo = 'matze/vim-move'
hook_add = '''
let g:move_map_keys = 0
vmap ∆ <Plug>MoveBlockDown
vmap ˚ <Plug>MoveBlockUp
nmap ∆ <Plug>MoveLineDown
nmap ˚ <Plug>MoveLineUp
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'pwntester/cobalt2.vim'
hook_add = '''
set background=dark

"Since the colorscheme setting needs to be done after source, do it with VimEnter.
"However, add nested so that the occurrence of the Colorscheme event is not suppressed.
autocmd VimEnter * nested colorscheme cobalt2 

" Theme customization
"autocmd ColorScheme * hi ColorColumn guibg=#020511
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = 'cobalt2.vim'
hook_add = '''
execute 'source' fnameescape(expand('~/.config/nvim/rc.d/lightline.vim'))
'''

[[plugins]]
repo = 'benekastah/neomake'
depends = 'lightline.vim'
hook_add = '''
autocmd BufEnter * nested Neomake
autocmd BufWritePost * nested Neomake
autocmd User NeomakeFinished nested call lightline#update()
let g:neomake_javascript_enabled_checkers = ['jshint', 'eslint']
let g:neomake_javascript_eslint_marker = {
      \   'exe': 'eslint_d',
      \   'args': ['-f', 'compact', '--fix'],
      \   'errorformat': '%E%f: line %l\, col %c\, Error - %m,' .
      \   '%W%f: line %l\, col %c\, Warning - %m'
      \ }
if has('macunix')
    let g:neomake_swift_enabled_makers = ['swiftc']
    let g:neomake_swift_swiftc_maker = {
        \ 'args': [
            \'-parse',
            \'-target', 'x86_64-apple-ios10.0',
            \'-sdk', '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk'
        \ ],
        \ 'errorformat':
            \ '%E%f:%l:%c: error: %m,' .
            \ '%W%f:%l:%c: warning: %m,' .
            \ '%Z%\s%#^~%#,' .
            \ '%-G%.%#',
        \ }
    let g:neomake_objc_enabled_makers = ['clang']
    let g:neomake_objc_clang_maker = {
            \ 'args': [
            \ '-fsyntax-only',
            \ '-Wall',
            \ '-Wextra',
            \ '-c',
            \ '-mios-simulator-version-min=10.0',
            \ '-fobjc-abi-version=2',
            \ '-isysroot', '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk',
        \],
        \ 'errorformat':
            \ '%-G%f:%s:,' .
            \ '%f:%l:%c: %trror: %m,' .
            \ '%f:%l:%c: %tarning: %m,' .
            \ '%f:%l:%c: %m,'.
            \ '%f:%l: %trror: %m,'.
            \ '%f:%l: %tarning: %m,'.
            \ '%f:%l: %m',
        \ }
endif
let g:neomake_error_sign = {
            \ 'text': '✖',
            \ 'texthl': 'NeomakeErrorMsg',
            \ }

let g:neomake_warning_sign = {
            \ 'text': '⚠',
            \ 'texthl': 'NeomakeWarningMsg',
            \ }

'''

[[plugins]]
repo = 't9md/vim-choosewin'
on_map = '<Plug>'
hook_add = 'nmap <C-w><C-w> <Plug>(choosewin)'

[[plugins]]
repo = 'chaoren/vim-wordmotion'
hook_add = '''
let g:wordmotion_prefix = '<Leader>'
'''

[[plugins]]
repo = 'google/vim-searchindex'

[[plugins]]
repo = 'junegunn/rainbow_parentheses.vim'
hook_source = '''
autocmd BufEnter * nested :RainbowParentheses
'''

[[plugins]]
repo = 'alvan/vim-closetag'
hook_source = '''
let g:closetag_filenames = "*.xml,*.html,*.xhtml,*.phtml"
'''

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'

[[plugins]]
repo = 'benmills/vimux'

[[plugins]]
repo = 'ap/vim-css-color'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1
hook_source = '''
let g:lexima_enable_basic_rules = 1
let g:lexima_enable_space_rules = 1
let g:lexima_enable_endwise_rules = 1
let g:lexima_enable_newline_rules = 1
'''

# [[plugins]]
# repo = 'Shougo/neosnippet'
# on_i = 1
# hook_add = '''
# imap <tab> <Plug>(neosnippet_expand_or_jump)
# smap <tab> <Plug>(neosnippet_expand_or_jump)
# xmap <tab> <Plug>(neosnippet_expand_target)
# imap <expr><tab> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
# '''

# [[plugins]]
# repo = 'Shougo/neosnippet-snippets'
# on_i = 1

[[plugins]]
repo = 'SirVer/ultisnips'
on_i = 1
hook_add = '''
"let g:UltiSnipsSnippetsDir = '~/.config/nvim/UltiSnips'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
'''

[[plugins]]
repo = 'honza/vim-snippets'
on_i = 1

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_add = '''
nnoremap <leader>c :call deoplete#toggle()<Cr>
inoremap <silent><expr> <C-k> pumvisible() ? "\<C-p>" : ""
inoremap <silent><expr> <C-j> pumvisible() ? "\<C-n>" : ">"
'''
hook_source = '''
let g:deoplete#enable_at_startup = 1 
"autocmd BufEnter *.* nested if getfsize(@%) < 1000000 | let g:deoplete#disable_auto_complete = 0 | endif
"autocmd BufEnter *.* nested if getfsize(@%) > 1000000 | let g:deoplete#disable_auto_complete = 1 | endif
"autocmd BufEnter *.* nested if getfsize(@%) < 1000000 | let b:deoplete_disable_auto_complete = 0 | endif
"autocmd BufEnter *.* nested if getfsize(@%) > 1000000 | let b:deoplete_disable_auto_complete = 1 | endif
"autocmd BufEnter *.* nested if getfsize(@%) > 1000000 | let b:deoplete_ignore_sources = ['buffer'] | endif
"autocmd BufEnter *.* nested if getfsize(@%) < 1000000 | call deoplete#enable() | endif
"autocmd BufEnter *.* nested if getfsize(@%) < 1000000 | call deoplete#enable() | endif

autocmd BufEnter *.* nested if getfsize(@%) > 1000000 | call deoplete#disable() | endif

if has('macunix')
    let g:deoplete#sources#clang#libclang_path = '/usr/local/Cellar/llvm/3.9.0/lib/libclang.dylib'
    let g:deoplete#sources#clang#clang_header = '/usr/local/Cellar/llvm'
    let g:deoplete#sources#clang#flags = [
        \ "-cc1",
        \ "-triple", "x86_64-apple-ios9.3.0",
        \ "-isysroot", "/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk",
        \ "-fmax-type-align=16",
    \ ]
endif
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

[[plugins]]
repo = 'zchee/deoplete-clang'
on_ft = ['c', 'cpp', 'objc']
on_if = "has('macunix')"

[[plugins]]
repo = 'pwntester/deoplete-swift'
on_ft = 'swift'
on_if = "has('macunix')"

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = 'Linediff'

[[plugins]]
repo = 'rbgrouleff/bclose.vim'

# [[plugins]]
# repo = 'artur-shaik/vim-javacomplete2'
# on_ft = 'java'
# hook_source = '''
# autocmd FileType java nested setlocal omnifunc=javacomplete#Complete
# '''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'
hook_add = '''
let g:vim_markdown_folding_disabled = 1
autocmd FileType markdown nested setlocal spell complete+=kspell
'''

[[plugins]]
repo = 'elzr/vim-json'
'on_ft' = 'json'

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'gavocanov/vim-js-indent'
on_ft = 'javascript'

[[plugins]]
repo = 'b4winckler/vim-objc'
on_ft = 'objc'
hook_add = '''
autocmd BufNewFile,BufRead *.m nested set filetype=objc
'''

[[plugins]]
repo = 'kballard/vim-swift'
on_ft = 'swift'

[[plugins]]
repo = 'othree/xml.vim'
on_ft = ['xml', 'fortifyrulepack']

[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = 'scala'

[[plugins]]
repo = 'ekalinin/Dockerfile.vim'
on_ft = 'Dockerfile'

[[plugins]]
repo = 'tfnico/vim-gradle'
on_ft = 'gradle'
hook_add = '''
autocmd BufNewFile,BufRead *.gradle nested set filetype=groovy 
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'albertorestifo/github.vim'

[[plugins]]
repo = 'https://github.houston.softwaregrp.net/alvaro-munoz/vim-fortify'
depends = 'neomake'
hook_add = '''
nnoremap <leader>i :NewRuleID<Return>
let g:fortify_SCAPath = "/Applications/HP_Fortify/sca"
let g:fortify_PythonPath = "/usr/local/lib/python2.7/site-packages"
let g:fortify_AndroidJarPath = "/Users/alvaro/Library/Android/sdk/platforms/android-26/android.jar"
let g:fortify_DefaultJarPath = "/Applications/HP_Fortify/default_jars" 
let g:fortify_MemoryOpts = [ "-Xmx4096M", "-Xss24M", "-64" ]
let g:fortify_AWBOpts = []
let g:fortify_ScanOpts = [
    " \ "-debug", "-debug-verbose", "-logfile", "scan.log",
    " \ "-Ddebug.dump-nst",
    " \ "-Ddebug.dump-cg", 
    " \ "-Ddebug.dump-call-targets",
    " \ "-Ddf3.debug=taint.log",
    \ "-Dcom.fortify.sca.limiters.MaxChainDepth=10",
    \ "-Dcom.fortify.sca.limiters.MaxPassthroughChainDepth=10",
    \ "-Dcom.fortify.sca.DebugNumericTaint=true",
    \ "-Dcom.fortify.sca.ReportTrippedDepthLimiters=true",
    \ "-Dcom.fortify.sca.ReportTrippedNodeLimiters=true",
    \ "-Dcom.fortify.sca.ReportTightenedLimits=true", 
    \ "-Dcom.fortify.sca.alias.mode.scala=fi", 
    \ "-Dcom.fortify.sca.alias.mode.swift=fi", 
    \ "-Dcom.fortify.sca.Phase0HigherOrder.Level=1",
    \ "-Dcom.fortify.sca.Phase0HigherOrder.Languages=javascript",
    \ "-Dcom.fortify.sca.EnableDOMModeling=true",
\]
let g:fortify_TranslationOpts = [
    \ "-python-legacy",
\]
let g:fortify_JDKVersion = "1.8"
let g:fortify_XCodeSDK = "/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk"
autocmd BufNewFile,BufReadPost *.xml nested map R ,R
autocmd BufNewFile,BufReadPost *.rules nested map R ,R
autocmd BufNewFile,BufReadPost *.xml nested map r ,r
autocmd BufNewFile,BufReadPost *.rules nested map r ,r
autocmd FileType fortifydescription nested setlocal spell complete+=kspell
'''
hook_source = '''
autocmd FileType fortifyrulepack nested setlocal omnifunc=fortify#complete
autocmd FileType fortifyauditpane nested nmap <buffer><expr> <S-l> ""
autocmd FileType fortifyauditpane nested nmap <buffer><expr> <S-h> ""
autocmd FileType fortifyauditpane nested nmap <buffer><expr> <S-k> ""
" search for contents of register 0 (where AuditPane copies the RuleIDs)
noremap <C-s> :execute substitute('/'.@0,'0$','','g')<CR>
'''

# [[plugins]]
# repo = 'majutsushi/tagbar'
# on_cmd = 'Tagbar'

# [[plugins]]
# repo = 'godlygeek/tabular'
# on_cmd = 'Tabularize'
# hook_add = '''
# nmap <Leader>a= :Tabularize /=<Return>
# vmap <Leader>a= :Tabularize /=<Return>
# nmap <Leader>a: :Tabularize /:\zs<Return>
# vmap <Leader>a: :Tabularize /:\zs<Return>
# '''

# [[plugins]]
# repo = 'Shougo/neomru.vim'
#
# [[plugins]]
# repo = 'Shougo/denite.nvim'
# on_cmd = ['Denite', 'DeniteCursorWord']
# hook_add = '''
# nnoremap <leader>m :<C-u>Denite file_mru<Return>
# nnoremap <leader>b :<C-u>Denite buffer<Return>
# nnoremap <leader>d :<C-u>Denite directory_rec<Return>
# '''
# hook_source = '''
# call denite#custom#map(
#         \ '<esc>',
#         \ '<denite:quit>',
#         \ 'noremap'
#         \)
# call denite#custom#map(
#         \ 'insert',
#         \ '<C-j>',
#         \ '<denite:move_to_next_line>',
#         \ 'noremap'
#         \)
# call denite#custom#map(
#         \ 'insert',
#         \ '<C-k>',
#         \ '<denite:move_to_previous_line>',
#         \ 'noremap'
#         \)
# call denite#custom#option("default", "prompt", ">")
# call denite#custom#option("default", "winheight", 10)
# call denite#custom#option("default", "reversed", 1)
# call denite#custom#option("default", "auto_resize", 1)
# '''

# [[plugins]]
# repo = 'kana/vim-arpeggio'
# hook_add = '''
# " vim-fortify chords
# call arpeggio#map('n', '', 0, 'fn', 'call NewRuleID<CR>')
# call arpeggio#map('n', '', 0, 'fc', 'call CommentRule<CR>')
# call arpeggio#map('n', '', 0, 'ft', 'call PatternValue<CR>')
#
# " Prompt for a command to run
# call arpeggio#map('n', '', 0, 'vc', ':VimuxPromptCommand<CR>')
# " Run last command executed by VimuxRunCommand
# call arpeggio#map('n', '', 0, 'vl', ':VimuxRunLastCommand<CR>')
# " Zoom the tmux runner pane, leave with tmux’s <Prefix>z
# call arpeggio#map('n', '', 0, 'vz', ':VimuxZoomRunner<CR>')
# " Inspect runner pane
# call arpeggio#map('n', '', 0, 'vz', ':VimuxInspectRunner<CR>')
# " Close runner pane
# call arpeggio#map('n', '', 0, 'vq', ':VimuxCloseRunner<CR>')
# call arpeggio#map('n', '', 0, 'go', ':call VimuxRunCommand("clear; go run " . bufname("%"))<CR>')
# '''

# [[plugins]]
# repo = 'kana/vim-operator-user'

# [[plugins]]
# repo = 'kana/vim-textobj-user'

# [[plugins]]
# repo = 'tpope/vim-repeat'

# [[plugins]]
# repo = 'tpope/vim-fugitive'
# hook_add = '''
# nnoremap <Leader>ga  :Gwrite<Return>
# nnoremap <Leader>gs  :Gstatus<Retun>
# nnoremap <Leader>gd  :Gdiff<Retun>
# nnoremap <Leader>gc  :Gcommit -av<Return>
# '''

# [[plugins]]
# repo = 'wincent/terminus'

# [[plugins]]
# repo = 'wincent/ferret'

# [[plugins]]
# repo = 'Shougo/context_filetype.vim'
