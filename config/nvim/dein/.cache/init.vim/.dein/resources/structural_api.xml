<Chapter>
	<Head>Structural Analyzer Rules API</Head>
	<Section>
		<Head>Type Hierarchy</Head>
		<Para>
			Value
			<Indented>Boolean</Indented>
			<Indented>String</Indented>
			<Indented2>Identifier</Indented2>
			<Indented2>Label (internal)</Indented2>
			<Indented>Number</Indented>
			<Indented>Null</Indented>
			<Indented>ClassLiteral</Indented>
			<Indented>EnumValue</Indented>
			<Indented>ConstantArray (internal)</Indented>
			<Indented>TypeSignature (internal)</Indented>
			<Indented>FunctionSignature (internal)</Indented>
			<Indented>Regex (internal)</Indented>
			<Indented>ListOfValues (internal)</Indented>
		</Para>
		<Para>Type</Para>
		<Para>Slot</Para>
		<Para>NamedParameter</Para>
		<Para>SourceLocation</Para>
		<Para>Namespace</Para>
		<Para>
			Construct
			<Indented>CompilationUnit</Indented>
			<Indented>Statement</Indented>
			<Indented2>CallStatement</Indented2>
			<Indented2>ReturnStatement</Indented2>
			<Indented2>ThrowStatement</Indented2>
			<Indented2>AssignmentStatement</Indented2>
			<Indented2>IfStatement</Indented2>
			<Indented2>WhileStatement</Indented2>
			<Indented2>DeclStatement</Indented2>
			<Indented2>Block</Indented2>
			<Indented3>TryBlock</Indented3>
			<Indented3>CatchBlock</Indented3>
			<Indented3>FinallyBlock</Indented3>
			<Indented3>SynchronizedBlock</Indented3>
			<Indented3>SwitchBlock</Indented3>
			<Indented3>AsmBlock</Indented3>
			<Indented>SwitchCase</Indented>
			<Indented>Expression</Indented>
			<Indented2>Location</Indented2>
			<Indented3>FieldAccess</Indented3>
			<Indented3>VariableAccess</Indented3>
			<Indented3>ArrayAccess</Indented3>
			<Indented2>FunctionPointer</Indented2>
			<Indented2>FunctionCall</Indented2>
			<Indented3>FunctionPointerCall</Indented3>
			<Indented2>Allocation</Indented2>
			<Indented2>Operation</Indented2>
			<Indented2>Instanceof</Indented2>
			<Indented2>Typecast</Indented2>
			<Indented2>Dereference</Indented2>
			<Indented2>Literal</Indented2>
			<Indented3>StringLiteral</Indented3>
			<Indented3>CharLiteral</Indented3>
			<Indented3>BooleanLiteral</Indented3>
			<Indented3>IntLiteral</Indented3>
			<Indented3>LongLiteral</Indented3>
			<Indented3>FloatLiteral</Indented3>
			<Indented3>DoubleLiteral</Indented3>
			<Indented3>NullLiteral</Indented3>
			<Indented3>ClassLiteralExpression</Indented3>
			<Indented>Declaration</Indented>
			<Indented2>Variable</Indented2>
			<Indented2>Class</Indented2>
			<Indented2>Field</Indented2>
			<Indented2>Function</Indented2>
			<Indented>CommentFile</Indented>
			<Indented>Comment</Indented>
			<Indented>Annotation</Indented>
			<Indented>AnnotationElement</Indented>
		</Para>
	</Section>
	<Section>
		<Head>Object</Head>
		<Para>The base type for all objects.</Para>
	</Section>
	<Section>
		<Head>Value</Head>
		<Para>The base type for simple values (numbers, strings, etc.)</Para>
	</Section>
	<Section>
		<Head>Boolean</Head>
		<Para>A boolean value.  Can be either "true" or "false".</Para>
	</Section>
	<Section>
		<Head>String</Head>
		<Para>A string value.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>length</Bold>
					<Emphasis>(Number)</Emphasis>
					:
					The number of characters in the string.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Number</Head>
		<Para>An integer or floating point value.</Para>
	</Section>
	<Section>
		<Head>Null</Head>
		<Para>A null program value.</Para>
	</Section>
	<Section>
		<Head>ClassLiteral</Head>
		<Para>The value of a class literal (foo.class)</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>namedType</Bold>
					<Emphasis>(Type)</Emphasis>
					:
					the type referred to by this class literal
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Identifier</Head>
		<Para>Name of a program entity such as a variable, field or function.</Para>
	</Section>
	<Section>
		<Head>EnumValue</Head>
		<Para>Name of a program entity such as a variable, field or function.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>type</Bold>
					<Emphasis>(Type)</Emphasis>
					:
					the enclosing type for the enumeration value
				</Item>
				<Item>
					<Bold>name</Bold>
					<Emphasis>(String)</Emphasis>
					:
					the name of the enumeration value
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>ConstantArray (internal)</Head>
		<Para>An array of constant values</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>values</Bold>
					<Emphasis>(Value[])</Emphasis>
					:
					the elements of the array
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Label (internal)</Head>
		<Para>A rule label</Para>
	</Section>
	<Section>
		<Head>TypeSignature (internal)</Head>
		<Para>A type signature string literal (e.g., T"char *"), it is comparable to Type, but not String.</Para>
	</Section>
	<Section>
		<Head>FunctionSignature (internal)</Head>
		<Para>A function signature string literal (e.g., F"{malloc,calloc}(unsigned int)-&gt;void*"), it use regex matching algorithm to match function name and type matching algorithm to match parameter and return types.</Para>
	</Section>
	<Section>
		<Head>Regex (internal)</Head>
		<Para>A function signature string literal (e.g., R"strlen|strcpy"), it can be compared with regex "matches".</Para>
	</Section>
	<Section>
		<Head>ListOfValues (internal)</Head>
		<Para>A list of values.</Para>
	</Section>
	<Section>
		<Head>Type</Head>
		<Para>A type in the programming language being analyzed.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>primitive</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					Whether this type is a primitive type.
				</Item>
				<Item>
					<Bold>name</Bold>
					<Emphasis>(Identifier)</Emphasis>
					:
					The name of this type.
				</Item>
				<Item>
					<Bold>arrayDimensions</Bold>
					<Emphasis>(Number)</Emphasis>
					:
					The number of array dimensions.  For example, the type "Object[][]" has two array dimensions.
				</Item>
				<Item>
					<Bold>pointerDepth</Bold>
					<Emphasis>(Number)</Emphasis>
					:
					The level of pointer indirection.  For example, the type "char**" has a pointer depth of two.
				</Item>
				<Item>
					<Bold>indirectionLevel</Bold>
					<Emphasis>(Number)</Emphasis>
					:
					The total indirection level (which is the sum of "arrayDimensions" and "pointerDepth")
				</Item>
				<Item>
					<Bold>definition</Bold>
					<Emphasis>(Class)</Emphasis>
					:
					The class declaration that defines this type.
				</Item>
				<Item>
					<Bold>storageSize</Bold>
					<Emphasis>(Number)</Emphasis>
					:
					The number of bytes of memory occupied by an instance of this type (only accurate for C/C++ code)
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Slot</Head>
		<Para>An input or output slot for a function (such as a parameter or return value)</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>name</Bold>
					<Emphasis>(Identifier)</Emphasis>
					:
					The name of the function slot, if available
				</Item>
				<Item>
					<Bold>type</Bold>
					<Emphasis>(Type)</Emphasis>
					:
					The type of the function slot
				</Item>
				<Item>
					<Bold>annotations</Bold>
					<Emphasis>(Annotation[])</Emphasis>
					:
					The annotations on the slot (for parameters) Since 3.8
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>NamedParameter (internal)</Head>
		<Para>Named function parameter</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>name</Bold>
					<Emphasis>(String)</Emphasis>
					:
					the parameter name
				</Item>
				<Item>
					<Bold>expression</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					the parameter expression
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>SourceLocation (internal)</Head>
		<Para>Refers to a location in source code.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>isMacroExpansion</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:

				</Item>
				<Item>
					<Bold>startLine</Bold>
					<Emphasis>(Number)</Emphasis>
					:
					The line number that this location starts at.
				</Item>
				<Item>
					<Bold>endLine</Bold>
					<Emphasis>(Number)</Emphasis>
					:

				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Namespace (internal)</Head>
		<Para>A namespace</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>name</Bold>
					<Emphasis>(String)</Emphasis>
					:

				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Construct</Head>
		<Para>The base type for all matchable constructs.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>enclosingClass</Bold>
					<Emphasis>(Class)</Emphasis>
					:
					The closest class that encloses this construct.
				</Item>
				<Item>
					<Bold>empty</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					Whether this construct has no children.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>CompilationUnit</Head>
		<Para>A compilation unit (usually, all the code in a file)</Para>
	</Section>
	<Section>
		<Head>Statement</Head>
		<Para>A source code statement.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>enclosingFunction</Bold>
					<Emphasis>(Function)</Emphasis>
					:
					The function whose body contains this statement.
				</Item>
				<Item>
					<Bold>label</Bold>
					<Emphasis>(String)</Emphasis>
					:
					The label for the statement if there is one.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>CallStatement</Head>
		<Para>A function call as a statement by itself.</Para>
	</Section>
	<Section>
		<Head>ReturnStatement</Head>
		<Para>A "return" statement.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>expression</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					The expression being returned.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>ThrowStatement</Head>
		<Para>An exception-throwing statement.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>expression</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					The expression being thrown.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>AssignmentStatement</Head>
		<Para>An assignment.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>lhs</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					The left-hand side of the assignment.
				</Item>
				<Item>
					<Bold>rhs</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					The right-hand side of the assignment.
				</Item>
				<Item>
					<Bold>isIncrDecr</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					Whether the assignment is derived from an increment or a decrement statement (e.g., i++, i--).
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>IfStatement</Head>
		<Para>An "if" condition statement.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>expression</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					The conditional expression.
				</Item>
				<Item>
					<Bold>ifBlock</Bold>
					<Emphasis>(Block)</Emphasis>
					:
					The block that executes if the condition is true.
				</Item>
				<Item>
					<Bold>elseBlock</Bold>
					<Emphasis>(Block)</Emphasis>
					:
					The block that executes if the condition is false (or null, if none exists)
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>WhileStatement</Head>
		<Para>A loop.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>expression</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					The conditional expression.
				</Item>
				<Item>
					<Bold>block</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					The body of the loop.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>DeclStatement</Head>
		<Para>A declaration.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>variable</Bold>
					<Emphasis>(Variable)</Emphasis>
					:
					The variable being declared.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Block</Head>
		<Para>A block of code.</Para>
	</Section>
	<Section>
		<Head>TryBlock</Head>
		<Para>A "try" block.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>catchBlocks</Bold>
					<Emphasis>(CatchBlock[])</Emphasis>
					:
					The list of associated "catch" blocks
				</Item>
				<Item>
					<Bold>finallyBlock</Bold>
					<Emphasis>(FinallyBlock)</Emphasis>
					:
					The associated "finally" block (or null, if none exists).
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>CatchBlock</Head>
		<Para>A "catch" block.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>exception</Bold>
					<Emphasis>(Variable)</Emphasis>
					:
					The exception that is caught.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>FinallyBlock</Head>
		<Para>A "finally" block.</Para>
	</Section>
	<Section>
		<Head>SynchronizedBlock</Head>
		<Para>A "synchronized" block in Java.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>lock</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					The expression for the object being synchronized.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>SwitchBlock</Head>
		<Para>A "switch" statement block.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>cases</Bold>
					<Emphasis>(SwitchCase[])</Emphasis>
					:
					The list of "case" sections.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>SwitchCase</Head>
		<Para>A "case" of a "switch".</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>default</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					Whether this case is the "default" case.
				</Item>
				<Item>
					<Bold>expression</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					Whether this case is the "default" case.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>AsmBlock</Head>
		<Para>A "asm" block.</Para>
	</Section>
	<Section>
		<Head>Expression</Head>
		<Para>The base type for all expressions.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>type</Bold>
					<Emphasis>(Type)</Emphasis>
					:
					The type of the declaration.
				</Item>
				<Item>
					<Bold>reachingTypes</Bold>
					<Emphasis>(Type[])</Emphasis>
					:
					The reaching types of the expression
				</Item>
				<Item>
					<Bold>partialReachingTypes</Bold>
					<Emphasis>(Type[])</Emphasis>
					:
					The partial reaching types of the expression
				</Item>
				<Item>
					<Bold>enclosingStatement</Bold>
					<Emphasis>(Statement)</Emphasis>
					:
					The statement that this expression is part of.
				</Item>
				<Item>
					<Bold>constantValue</Bold>
					<Emphasis>(Value)</Emphasis>
					:
					The constant value of this expression.  Will be null if this expression doesn't have a constant value or if SCA is unable to determine it.
				</Item>
				<Item>
					<Bold>constantValues</Bold>
					<Emphasis>(Value[])</Emphasis>
					:
					An exhaustive list of possible constant values for this expression.  Will be an empty list (length == 0) if SCA is unable to enumerate all possible constant values for this expression.
				</Item>
				<Item>
					<Bold>partialConstantValues</Bold>
					<Emphasis>(Value[])</Emphasis>
					:
					A partial list of possible constant values for this expression.
				</Item>
				<Item>
					<Bold>enclosingFunction</Bold>
					<Emphasis>(Function)</Emphasis>
					:
					The function whose body encloses this expression.
				</Item>
				<Item>
					<Bold>location</Bold>
					<Emphasis>(Location)</Emphasis>
					:
					The underlying location of this expression (after removing any type casts, etc.). Will be null if this expression doesn't represent a location.
				</Item>
				<Item>
					<Bold>sourceLocation</Bold>
					<Emphasis>(SourceLocation)</Emphasis>
					:
					The location, in source code, of this expression.
				</Item>
				<Item>
					<Bold>possibleTypes</Bold>
					<Emphasis>(Type[])</Emphasis>
					:
					The possible types the analyzer has found for the expression. These include the reaching types, but may include inferred types as well.
				</Item>
				<Item>
					<Bold>possibleFunctionTargets</Bold>
					<Emphasis>(Function[])</Emphasis>
					:
					for function-valued expressions, the functions they could possibly refer to. Requires higher order analysis to be turned on.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Location</Head>
		<Para>A storage location</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>arrayIndices</Bold>
					<Emphasis>(Expression[])</Emphasis>
					:
					The array indices of this location.  This property is deprecated in 3.7: array indices can be accessed via the index property of the ArrayAccess type
				</Item>
				<Item>
					<Bold>transitiveBase</Bold>
					<Emphasis>(Location)</Emphasis>
					:
					The transitive base of the location expression.  For instance, the transitive base of 'x.y[z]' is x. Since 3.7.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>FieldAccess</Head>
		<Para>An expression that access a field of a variable.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>instance</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					The base expression of this field access.
				</Item>
				<Item>
					<Bold>field</Bold>
					<Emphasis>(Field)</Emphasis>
					:
					The declaration of the field being accessed.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>VariableAccess</Head>
		<Para>An expression that access a variable.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>variable</Bold>
					<Emphasis>(Variable)</Emphasis>
					:
					The declaration of the variable being accessed.
				</Item>
				<Item>
					<Bold>this</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					True if the variable is the "this" variable.
				</Item>
				<Item>
					<Bold>outer</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					True if the variable is the enclosing class of the "this" variable.
				</Item>
				<Item>
					<Bold>reads</Bold>
					<Emphasis>(VariableAccess[])</Emphasis>
					:
					The shallow list of uses that this definition reaches.
				</Item>
				<Item>
					<Bold>realReads</Bold>
					<Emphasis>(VariableAccess[])</Emphasis>
					:
					The less shallow list of uses that this definition reaches.
				</Item>
				<Item>
					<Bold>singleUseTempExpression</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					The expression that corresponds to an SCA-introduced temporary variable.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>ArrayAccess</Head>
		<Para>An expression representing an array access.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>base</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					The array being accessed by this array access
				</Item>
				<Item>
					<Bold>index</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					The index being used in this array access
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>FunctionPointer</Head>
		<Para>An function identifier.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>primaryResolution</Bold>
					<Emphasis>(Function)</Emphasis>
					:
					The function that this identifier refers to.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>FunctionCall</Head>
		<Para>A function or method call.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>instance</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					The object instance on which this method is being called.  Will be null for static function calls.
				</Item>
				<Item>
					<Bold>function</Bold>
					<Emphasis>(Function)</Emphasis>
					:
					The target of the function call.
				</Item>
				<Item>
					<Bold>arguments</Bold>
					<Emphasis>(Expression[])</Emphasis>
					:
					The arguments to the function.
				</Item>
				<Item>
					<Bold>name</Bold>
					<Emphasis>(Identifier)</Emphasis>
					:
					For a direct function call, the name of the function.  For a pointer call, the name of the entity (field or variable) that holds the pointer.
				</Item>
				<Item>
					<Bold>namedParameters</Bold>
					<Emphasis>(NamedParameter[])</Emphasis>
					:
					named parameters for the call
				</Item>
				<Item>
					<Bold>possibleTargets</Bold>
					<Emphasis>(Function[])</Emphasis>
					:
					The functions that could possibly be called by this call, including virtual and higher-order resolutions.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>FunctionPointerCall</Head>
		<Para>A function pointer call.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>functionPointer</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					The function pointer is being called.
				</Item>
				<Item>
					<Bold>closureExpression</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
                    The invoked closure expression if any, otherwise null
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Allocation</Head>
		<Para>An allocation of an object.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>constructor</Bold>
					<Emphasis>(FunctionCall)</Emphasis>
					:
					The constructor function associated with an allocation.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Operation</Head>
		<Para>An operator expression (both unary and binary)</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>op</Bold>
					<Emphasis>(String)</Emphasis>
					:
					A string that is equal to the operator token in the source language.
				</Item>
				<Item>
					<Bold>unary</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					Whether the operator is a unary operator.
				</Item>
				<Item>
					<Bold>lhs</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					The left-hand side of this operation.
				</Item>
				<Item>
					<Bold>rhs</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					The right-hand side of this operation.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Instanceof</Head>
		<Para>A type instance check expression.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>targetType</Bold>
					<Emphasis>(Type)</Emphasis>
					:
					The type being checked against.
				</Item>
				<Item>
					<Bold>expression</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					The expression whose type is being checked.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Typecast</Head>
		<Para>A type cast expression.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>targetType</Bold>
					<Emphasis>(Type)</Emphasis>
					:
					The type to which the expression is being cast.
				</Item>
				<Item>
					<Bold>expression</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					The underlying expression of the type cast.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Dereference</Head>
		<Para>A dereference operation.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>expression</Bold>
					<Emphasis>(Expression)</Emphasis>
					:
					The underlying expression of the type cast.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Literal</Head>
		<Para>A literal value.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>image</Bold>
					<Emphasis>(String)</Emphasis>
					:
					The string version of this literal value.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>StringLiteral</Head>
		<Para>A string literal.</Para>
	</Section>
	<Section>
		<Head>CharLiteral</Head>
		<Para>A character literal.</Para>
	</Section>
	<Section>
		<Head>BooleanLiteral</Head>
		<Para>A boolean literal ("true" or "false").</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>value</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					The value of this literal.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>IntLiteral</Head>
		<Para>An integer literal.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>value</Bold>
					<Emphasis>(Number)</Emphasis>
					:
					The value of this literal.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>LongLiteral</Head>
		<Para>A long literal.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>value</Bold>
					<Emphasis>(Number)</Emphasis>
					:
					The value of this literal.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>FloatLiteral</Head>
		<Para>A float literal.</Para>
	</Section>
	<Section>
		<Head>DoubleLiteral</Head>
		<Para>A double literal.</Para>
	</Section>
	<Section>
		<Head>NullLiteral</Head>
		<Para>A literal value that represents the program value "null".</Para>
	</Section>
	<Section>
		<Head>ClassLiteralExpression</Head>
		<Para>A class literal (foo.class)</Para>
	</Section>
	<Section>
		<Head>Declaration</Head>
		<Para>The base type for all declarations.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>modifiers</Bold>
					<Emphasis>(String[])</Emphasis>
					:
					all modifiers applied to this declaration
				</Item>
				<Item>
					<Bold>abstract</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:

				</Item>
				<Item>
					<Bold>final</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:

				</Item>
				<Item>
					<Bold>synthetic</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:

				</Item>
				<Item>
					<Bold>package</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:

				</Item>
				<Item>
					<Bold>private</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:

				</Item>
				<Item>
					<Bold>protected</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:

				</Item>
				<Item>
					<Bold>public</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:

				</Item>
				<Item>
					<Bold>static</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:

				</Item>
				<Item>
					<Bold>strictfp</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:

				</Item>
				<Item>
					<Bold>synchronized</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:

				</Item>
				<Item>
					<Bold>virtual</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					Whether the declaration has the "virtual" modifier.
				</Item>
				<Item>
					<Bold>volatile</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:

				</Item>
				<Item>
					<Bold>serializable</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:

				</Item>
				<Item>
					<Bold>webservice</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:

				</Item>
				<Item>
					<Bold>name</Bold>
					<Emphasis>(Identifier)</Emphasis>
					:
					The name of the declared entity
				</Item>
				<Item>
					<Bold>type</Bold>
					<Emphasis>(Type)</Emphasis>
					:
					The type of the declared entity
				</Item>
				<Item>
					<Bold>filename</Bold>
					<Emphasis>(String)</Emphasis>
					:
					The name of the file that the declaration appears in. Since 3.9
				</Item>
				<Item>
					<Bold>filepath</Bold>
					<Emphasis>(String)</Emphasis>
					:
					Do not use this yet.
				</Item>
				<Item>
					<Bold>sourceLocation</Bold>
					<Emphasis>(SourceLocation)</Emphasis>
					:

				</Item>
				<Item>
					<Bold>labels</Bold>
					<Emphasis>(String[])</Emphasis>
					:
					All rules labels that have been placed on this symbol
				</Item>
				<Item>
					<Bold>namespace</Bold>
					<Emphasis>(Namespace)</Emphasis>
					:

				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Variable</Head>
		<Para>A variable declaration.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>enclosingFunction</Bold>
					<Emphasis>(Function)</Emphasis>
					:
					The function whose body contains this declaration.
				</Item>
				<Item>
					<Bold>referenceTaken</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					Whether this variable has had its address taken (and therefore may be aliased).
				</Item>
				<Item>
					<Bold>uses</Bold>
					<Emphasis>(VariableAccess[])</Emphasis>
					:

				</Item>
				<Item>
					<Bold>isTemp</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:

				</Item>
				<Item>
					<Bold>const</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					If this variable is declared to be a constant ("const" in C/C++, "final" in Java)
				</Item>
				<Item>
					<Bold>annotations</Bold>
					<Emphasis>(Annotation[])</Emphasis>
					:
					The annotations on this variable Since 3.7
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Class</Head>
		<Para>A class or interface declaration.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>functions</Bold>
					<Emphasis>(Function[])</Emphasis>
					:
					The functions declared in this class.
				</Item>
				<Item>
					<Bold>fields</Bold>
					<Emphasis>(Field[])</Emphasis>
					:
					The fields declared in this class.
				</Item>
				<Item>
					<Bold>supers</Bold>
					<Emphasis>(Class[])</Emphasis>
					:
					The list of classes and interfaces that this class is assignable to.  This includes the current class.
				</Item>
				<Item>
					<Bold>directSupers</Bold>
					<Emphasis>(Class[])</Emphasis>
					:
					The list of the classes and interfaces that this class extends or implements directly. Since 3.5
				</Item>
				<Item>
					<Bold>interface</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					Whether this class is actually an interface.
				</Item>
				<Item>
					<Bold>annotations</Bold>
					<Emphasis>(Annotation[])</Emphasis>
					:
					The annotations of this class Since 3.7
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Field</Head>
		<Para>A field declaration.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>annotations</Bold>
					<Emphasis>(Annotation[])</Emphasis>
					:
					The annotations of this field Since 3.7
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Function</Head>
		<Para>A function or method.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>constructor</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					Whether this is a constructor.
				</Item>
				<Item>
					<Bold>destructor</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					Whether this is a destructor.
				</Item>
				<Item>
					<Bold>initializer</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					Whether this is a static initializer.
				</Item>
				<Item>
					<Bold>parameters</Bold>
					<Emphasis>(Variable[])</Emphasis>
					:
					The parameter declarations for this function (excluding 'thisParameter'). WARNING: This will be null unless the function is defined in one of the source files being analyzed.  If you're just interested in the types of the parameters, use the "parameterTypes" property instead.
				</Item>
				<Item>
					<Bold>thisParameter</Bold>
					<Emphasis>(Variable)</Emphasis>
					:
					The parameter declaration for the implicit 'this' pointer for this function (if there is one).  WARNING: This will be null unless the function is defined in one of the source files being analyzed.
				</Item>
				<Item>
					<Bold>parameterTypes</Bold>
					<Emphasis>(Type[])</Emphasis>
					:
					The parameter types of this function.
				</Item>
				<Item>
					<Bold>exceptionTypes</Bold>
					<Emphasis>(Type[])</Emphasis>
					:
					The list of exceptions declared to be thrown by this function.
				</Item>
				<Item>
					<Bold>returnType</Bold>
					<Emphasis>(Type)</Emphasis>
					:
					The return type of this function (identical to the "type" property).
				</Item>
				<Item>
					<Bold>thisSlot</Bold>
					<Emphasis>(Slot)</Emphasis>
					:
					The slot for the target of the function, if there is one
				</Item>
				<Item>
					<Bold>parameterSlots</Bold>
					<Emphasis>(Slot[])</Emphasis>
					:
					A list of all parameter slots
				</Item>
				<Item>
					<Bold>returnSlot</Bold>
					<Emphasis>(Slot)</Emphasis>
					:
					A slot for a return value of the function if the return type is not void
				</Item>
				<Item>
					<Bold>slots</Bold>
					<Emphasis>(Slot[])</Emphasis>
					:
					A list of all function slots, including 'thisSlot' (if function has a target) and 'returnSlot' (for non-void functions).
				</Item>
				<Item>
					<Bold>signature</Bold>
					<Emphasis>(FunctionSignature)</Emphasis>
					:
					The return signature of this function, (it's the composition of function.name, function.parameterTypes, function.returnType, and function.exceptionTypes).
				</Item>
				<Item>
					<Bold>callers</Bold>
					<Emphasis>(Function[])</Emphasis>
					:
					This list of functions that call this function.
				</Item>
				<Item>
					<Bold>callees</Bold>
					<Emphasis>(Function[])</Emphasis>
					:
					The list of functions that are called by this function.
				</Item>
				<Item>
					<Bold>supers</Bold>
					<Emphasis>(Function[])</Emphasis>
					:
					The list of functions that this function (either directly or indirectly) overrides or implements.
				</Item>
				<Item>
					<Bold>isReferenced</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					Whether this function is ever reified ("has its address taken").
				</Item>
				<Item>
					<Bold>isBodyAvailable</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					Whether this function has an analyzable implementation available to SCA. Since 3.19
				</Item>
				<Item>
					<Bold>isLibrary</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					Whether this function comes from library. Since 6.30
				</Item>
				<Item>
					<Bold>annotations</Bold>
					<Emphasis>(Annotation[])</Emphasis>
					:
					The annotations of this function Since 3.7
				</Item>
				<Item>
					<Bold>possibleHeapPaths</Bold>
					<Emphasis>(String[])</Emphasis>
					:
					a chain of function calls, gets the instance possible heap paths.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>CommentFile</Head>
		<Para>An object that contains all the comments in a particular file.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>comments</Bold>
					<Emphasis>(Comment[])</Emphasis>
					:
					The comments in the given file.
				</Item>
				<Item>
					<Bold>file</Bold>
					<Emphasis>(String)</Emphasis>
					:
					The file that this comment appears in.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Comment</Head>
		<Para>A source code comment.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>text</Bold>
					<Emphasis>(String)</Emphasis>
					:
					The text content of this comment.
				</Item>
				<Item>
					<Bold>doc</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					"true" if this comment is a Java or JSP documentation comment.
				</Item>
				<Item>
					<Bold>block</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					If this is a block code comment (documentation comments are not included).
				</Item>
				<Item>
					<Bold>inline</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					If this comment is a single-line "inline" comment ("//").
				</Item>
				<Item>
					<Bold>html</Bold>
					<Emphasis>(Boolean)</Emphasis>
					:
					If this comment is an HTML-style comment in a JSP ("&lt;!-- ... --&gt;").  HTML-style comments are also considered to be block comments.
				</Item>
				<Item>
					<Bold>sourceLocation</Bold>
					<Emphasis>(SourceLocation)</Emphasis>
					:
					The location of this comment.
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>Annotation</Head>
		<Para>A annotation in the target source code.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>type</Bold>
					<Emphasis>(Type)</Emphasis>
					:
					The fully qualified Java type of this annotation.
				</Item>
				<Item>
					<Bold>elements</Bold>
					<Emphasis>(AnnotationElement[])</Emphasis>
					:
					An annotation could have a list of properties. (probably we should use "properties" instead of "elements")
				</Item>
			</List>
		</Section>
	</Section>
	<Section>
		<Head>AnnotationElement</Head>
		<Para>A annotation in the target source code.</Para>
		<Section>
			<Head>Properties</Head>
			<List>
				<Item>
					<Bold>key</Bold>
					<Emphasis>(String)</Emphasis>
					:
					The key of this annotation property.
				</Item>
				<Item>
					<Bold>value</Bold>
					<Emphasis>(Value)</Emphasis>
					:
					The value of the above key.
				</Item>
			</List>
		</Section>
	</Section>
</Chapter>
