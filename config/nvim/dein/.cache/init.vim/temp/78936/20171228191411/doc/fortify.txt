*fortify.txt* Ease Fortify Rule Development

       _                  __            _   _  __
/\   /(_)_ __ ___        / _| ___  _ __| |_(_)/ _|_   _  ~
\ \ / / | '_ ` _ \ _____| |_ / _ \| '__| __| | |_| | | | ~
 \ V /| | | | | | |_____|  _| (_) | |  | |_| |  _| |_| | ~
  \_/ |_|_| |_| |_|     |_|  \___/|_|   \__|_|_|  \__, | ~
                                                  |___/  ~


====================================================================
CONTENTS                                            *FortifyContents*

    1. Introduction.......... |FortifyIntroduction|
    2. Requirements.......... |FortifyRequirements|
    3. Commands ............. |FortifyUsage|
    4. Motions & Text Objects |FortifyMotions|
    5. Rule Testing ......... |FortifyRuleTesting|
    6. Error Checker ........ |FortifyErrorChecker|
    7. Transformers ......... |FortifyTransformers|
    8. Completion ........... |FortifyCompletion|
    9. RuleWeb .............. |FortifyRuleWeb|
    10. License ............. |FortifyLicense|
    11. Bugs ................ |FortifyBugs|
    12. Contributing ........ |FortifyContributing|
    13. Credits ............. |FortifyCredits|

====================================================================
Section 1: Introduction                         *FortifyIntroduction*

This plugin with automatically provide syntax highlighting for
Potion files (files ending in .pn).

====================================================================
Section 2: Requirements                         *FortifyRequirements*

This plugin is only available if 'compatible' is not set.

This plugin is written for NeoVim <https://neovim.io/> since it takes
advantage of its asynchronous capabilities to run SCA commands in the 
background.

It also requires python support to be enabled. Verify running:
       sudo pip3 install neovim
       nvim --version | grep python

The following vim plugis are optional but recommended:
       - neomake: Run checks on rulepack files.
       - vim-airline: Display SCA status on statusline.
       - vim-commentary: To comment structural language code.
       - vim-repeat: To be able to repeat (.) commands.
       - ultisnips: For snippets

The following python plugins are used by the plugin:
       - jsbeautifier
       - lxml
       - ply
       - requests
       - whoosh

====================================================================
Section 3: Commands                                 *FortifyCommands*

>
       :NewRulePack <path>
<
       Creates a new rulepack based on template.
>
       :MakeMobileBuild [<build_id>] [<path>]
<
       Create mobile build and exports it to given path.
       If no build_id is passed, will take it from last translation/scan.
       If not path is given, will use current working directory.
       Exported session file name will always be <build_id>.mbs
>
       :CloneRule
<
       Clones rule under cursor and assigns a new rule ID.

>
       :CommentRule
<
       Comments in/out the rule under cursor.

>
       :IndentRule
<
       Pretty print rule.

>
       :NewRuleID
<
       Assign a new rule ID to rule under cursor.

>
       :PasteWithNewRuleID
<
       Paste contents from register 0 replacing rule IDs with new ones.

>
       :PatternValue
<
       Toggle a Value/Pattern tag.

>
       :SearchInGoogle
<
       Searches the rule's function/class in Google.

>
       :SearchInDash
<
       Searches the rule's function/class in Dash.

>
       :RuleHistory <rule_ID>
<
       Searches HPE RuleWeb for the given rule ID.
       See section for query details.

>
       :SearchRuleWeb <query>
<
       Searches HPE RuleWeb for the given qquery.

>
       :OpenFPR
<
       Opens FPR generated by Scan command in Audit Workbench.

>
       :ShowNST
<
       Finds and opens the NST file for the current buffer.

>
       :ApplyTransformer [<transformer>]
<
       Apply a Transformer to the rule under cursor.

>
       :ViewCategoryRow
<
       Shows CSV category in a table.

>
       :GenerateCategoryRow
<
       Generates CSV category row based on current buffer.


Note: all buffers and windows opened by the plugin are temporary and can be close with ‘q’ in normal mode

====================================================================
Section 4: Motions and Text Objects                  *FortifyMotions*

Motions:
       <count>,r: Move to previous rule in rulepack
       <count>,R: Move to next rule in rulepack.

Text Objects:
       <count>ar: Around rule (includes leading whitespaces)
       <count>ir: Inner rule (Does not include leading whitespaces)
       ac: CDATA block (Full lines not including lines with CDATA directive)
       ic: CDATA block (Whole text within in CDATA directive)
       af: FunctionIdentifier block (includes FunctionIdentifier tag lines)
       if: FunctionIdentifier block (does not include FunctionIdentifier tag lines)

Suggestion: remap them to r and R if you don’t use replace mode
       autocmd BufNewFile,BufReadPost *.xml map R ,R
       autocmd BufNewFile,BufReadPost *.rules map R ,R
       autocmd BufNewFile,BufReadPost *.xml map r ,r
       autocmd BufNewFile,BufReadPost *.rules map r ,r

====================================================================
Section 5: Rule Testing Framework                *FortifyRuleTesting*

>
       :Translate <path> [<mode>]
<
       <path>: Directories, files or % range
       <mode>: Maven, java, python, xcode, …

>
       :Scan [<buildId>] [<rules_file>]
<
       <buildId>: If not specified, uses last known one.
       <rules_file>: Path or % range.

Note: Define translation/scanning properties in .vimrc

       let g:fortify_PythonPath = "/usr/local/lib/python2.7/site-packages"
       let g:fortify_MemoryOpts = [ "-Xmx1024M", "-Xss24M", "-64" ]
       let g:fortify_AWBOpts = []
       let g:fortify_ScanOpts = []
       let g:fortify_TranslationOpts = []
       let g:fortify_JDKVersion = ["1.8"]

Note: Place a sca.properties JSON file within project root to apply properties
to just that project. Eg:

{
    "MemoryOpts":
    [
        "-Xmx8000M",
        "-Xss24M",
        "-64"
    ],
    "ScanOpts":
    [
        "-debug",
        "-logfile",
        "scan.log"
    ],
    "TranslationOpts":
    [
        "-debug",
        "-logfile",
        "translate.log"
    ]
}


====================================================================
Section 6: Error Checker                        *FortifyErrorChecker*

Requires "neomake" plugin:
       https://github.com/benekastah/neomake

Checks for following types of errors:
       - Validates rule schema
       - Validates rules:
              - Format versions
              - Description reference
              - VALIDATE taintflag
              - Metadata presence and correctness
              - Pattern vs Values
              - ApplyTo tags
              - ...
       - Validate Structural predicate:
              - Syntaxis errors
              - Pattern vs Values
              - ...

====================================================================
Section 7: Available Transformers               *FortifyTransformers*

Current available transformers include:
       - Generate Number Variants

====================================================================
Section 8: Completions                           *FortifyCompletions*

Uses UltiSnips for snippets and custom.
       - rule templates
       - desc (for debug description block)
       - write your own!

Uses buil-in OmniCompletion omnifunc function for completion.
       - structural language
       - rule schema

====================================================================
Section 9: RuleWeb Queries                           *FortifyRuleWeb*

A rule is basically an XML document with certain fields. RuleWeb indexes 
these fields using Lucene and makes it searchable using a Lucene-style 
query syntax.

Tokens are case-insensitive and AND-ed together. 
Example: java android looks for all rules with 'java' AND 'android'.

You can also look in specific fields using 'field:value'. 
Example: lang:dotnet type:sink looks for all rules in the dotnet language and of type sink.

If you don't specify a field, then it looks in the magic 'all' field. 
Not all rules are in the 'all' field; consult the chart below.

You can negate a term or look for rules without a term. 
Example: dataflow -sink looks for all rules with 'dataflow' AND NOT 'sink'.

There's some support for regex in query. 
Example: lang:dotnet fidfn:begin* to look for all the BeginX functions in dotnet APM.

------------------------------------------------------------------------------------------
| Field       | Description                | Example                                    |
| type !      | Kind of rule               | DataflowSinkRule; Dataflow Sink            |
| fv          | Format version             | 3.2; 3.7                                   |
| group       | Metainfo group             | android                                    |
| lang        | Technology language        | java; dotnet                               |
| notes       | Notes                      | conditional on NUMBER taint flag           |
| label @ #   | Rule albel                 | y                                          |
| descr       | Description ref tag        | setting_manipulation; setting manipulation |
| vtype ! # @ | Vuln Type                  | unchecked                                  |
| fidns       | Function id namespace      | System.IO.MemoryMappedFiles                |
| fidcn       | Function id classname      | MemoryMappedViewStream                     |
| fidfn       | Function id functionname   | get_Item                                   |
| fidpt       | Function id param type     | IAsyncResult                               |
| fidcl @ #   | Function id class label    |                                            |
| fidfl @ #   | Function id function label |                                            |
| vking       | Vulnerability kingdom      | Code Quality                               |
| vcat        | Vulnerability category     | Portability Flaw                           |
| vsubcat     | Vulnerability subcategory  | File Separator                             |
| taint @     | taint-related field        | FILE_SYSTEM                                |
| sm #        | StructuralMatch            |                                            |
| def #       | Definition                 | slash to find /; at1 to find @1            |
| pred #      | Predicate                  |                                            |
| script #    | Script                     |                                            |
------------------------------------------------------------------------------------------

!: ruletype is tokenized as whole words and 'camel' parts
@: flag fields have 'y' if exists; 'tf:y' for 'there is a taint flag'; flag is not in ALL
#: not included in ALL; that is, you need to use field:value syntax

====================================================================
Section 10: License                                  *FortifyLicense*

FREE as in FREE BEER

Copyright (c) Alvaro Muñoz. MIT License.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

====================================================================
Section 11: Bugs                                        *FortifyBugs*

Please use GitHub Issue tracker to report any bug.

====================================================================
Section 12: Contributing                        *FortifyContributing*

Please use GitHub to submit any Pull Requests.

====================================================================
Section 13: Credits                                  *FortifyCredits*

Plugin developed by Alvaro Muñoz (@pwntester)


